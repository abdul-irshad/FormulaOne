/* tslint:disable */
/* eslint-disable */
/**
 * FormulaOne.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDriverRequest,
  UpdateDriverRequest,
} from '../models/index';
import {
    CreateDriverRequestFromJSON,
    CreateDriverRequestToJSON,
    UpdateDriverRequestFromJSON,
    UpdateDriverRequestToJSON,
} from '../models/index';

export interface ApiDriversDriverIdGetRequest {
    driverId: string;
}

export interface ApiDriversPostRequest {
    createDriverRequest?: CreateDriverRequest;
}

export interface ApiDriversPutRequest {
    updateDriverRequest?: UpdateDriverRequest;
}

/**
 * DriversApi - interface
 * 
 * @export
 * @interface DriversApiInterface
 */
export interface DriversApiInterface {
    /**
     * 
     * @param {string} driverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApiInterface
     */
    apiDriversDriverIdGetRaw(requestParameters: ApiDriversDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiDriversDriverIdGet(requestParameters: ApiDriversDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApiInterface
     */
    apiDriversGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiDriversGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {CreateDriverRequest} [createDriverRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApiInterface
     */
    apiDriversPostRaw(requestParameters: ApiDriversPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiDriversPost(requestParameters: ApiDriversPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateDriverRequest} [updateDriverRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApiInterface
     */
    apiDriversPutRaw(requestParameters: ApiDriversPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiDriversPut(requestParameters: ApiDriversPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DriversApi extends runtime.BaseAPI implements DriversApiInterface {

    /**
     */
    async apiDriversDriverIdGetRaw(requestParameters: ApiDriversDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.driverId === null || requestParameters.driverId === undefined) {
            throw new runtime.RequiredError('driverId','Required parameter requestParameters.driverId was null or undefined when calling apiDriversDriverIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Drivers/{driverId}`.replace(`{${"driverId"}}`, encodeURIComponent(String(requestParameters.driverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDriversDriverIdGet(requestParameters: ApiDriversDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDriversDriverIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiDriversGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Drivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDriversGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDriversGetRaw(initOverrides);
    }

    /**
     */
    async apiDriversPostRaw(requestParameters: ApiDriversPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Drivers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDriverRequestToJSON(requestParameters.createDriverRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDriversPost(requestParameters: ApiDriversPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDriversPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiDriversPutRaw(requestParameters: ApiDriversPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Drivers`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDriverRequestToJSON(requestParameters.updateDriverRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDriversPut(requestParameters: ApiDriversPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDriversPutRaw(requestParameters, initOverrides);
    }

}
