/* tslint:disable */
/* eslint-disable */
/**
 * FormulaOne.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDriverAchievementRequest,
  UpdateDriverAchievementRequest,
} from '../models/index';
import {
    CreateDriverAchievementRequestFromJSON,
    CreateDriverAchievementRequestToJSON,
    UpdateDriverAchievementRequestFromJSON,
    UpdateDriverAchievementRequestToJSON,
} from '../models/index';

export interface ApiAchievementsDriverIdGetRequest {
    driverId: string;
}

export interface ApiAchievementsPostRequest {
    createDriverAchievementRequest?: CreateDriverAchievementRequest;
}

export interface ApiAchievementsPutRequest {
    updateDriverAchievementRequest?: UpdateDriverAchievementRequest;
}

/**
 * AchievementsApi - interface
 * 
 * @export
 * @interface AchievementsApiInterface
 */
export interface AchievementsApiInterface {
    /**
     * 
     * @param {string} driverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementsApiInterface
     */
    apiAchievementsDriverIdGetRaw(requestParameters: ApiAchievementsDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiAchievementsDriverIdGet(requestParameters: ApiAchievementsDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {CreateDriverAchievementRequest} [createDriverAchievementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementsApiInterface
     */
    apiAchievementsPostRaw(requestParameters: ApiAchievementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiAchievementsPost(requestParameters: ApiAchievementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateDriverAchievementRequest} [updateDriverAchievementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementsApiInterface
     */
    apiAchievementsPutRaw(requestParameters: ApiAchievementsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiAchievementsPut(requestParameters: ApiAchievementsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AchievementsApi extends runtime.BaseAPI implements AchievementsApiInterface {

    /**
     */
    async apiAchievementsDriverIdGetRaw(requestParameters: ApiAchievementsDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.driverId === null || requestParameters.driverId === undefined) {
            throw new runtime.RequiredError('driverId','Required parameter requestParameters.driverId was null or undefined when calling apiAchievementsDriverIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Achievements/{driverId}`.replace(`{${"driverId"}}`, encodeURIComponent(String(requestParameters.driverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAchievementsDriverIdGet(requestParameters: ApiAchievementsDriverIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAchievementsDriverIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAchievementsPostRaw(requestParameters: ApiAchievementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Achievements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDriverAchievementRequestToJSON(requestParameters.createDriverAchievementRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAchievementsPost(requestParameters: ApiAchievementsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAchievementsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAchievementsPutRaw(requestParameters: ApiAchievementsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Achievements`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDriverAchievementRequestToJSON(requestParameters.updateDriverAchievementRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAchievementsPut(requestParameters: ApiAchievementsPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAchievementsPutRaw(requestParameters, initOverrides);
    }

}
